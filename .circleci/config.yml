# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/php:7.1.5-browsers

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mysql:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "composer.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      # Install Composer
      - run: php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
      - run: php -r "if (hash_file('SHA384', 'composer-setup.php') === '544e09ee996cdf60ece3804abc52599c22b1f40f4323403c44d44fdfdd586475ca9813a858088ffbc1f233e9b180f061') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
      - run: php composer-setup.php
      - run: php -r "unlink('composer-setup.php');"
      - run: php composer.phar self-update
      - run: sudo mv composer.phar /usr/local/bin/composer
      - run: composer install -n --prefer-dist
      # Put config file
      - run: echo "BOT_NAME = '${BOT_NAME}'\n" >> bot.config
      - run: echo "BOT_TOKEN = '${BOT_TOKEN}'\n" >> bot.config
      - run: echo "WEBHOOK_URL = '${BOT_WEBHOOK}'\n" >> bot.config
      - run: echo "CHANNEL_ID_ERROR_LOGS = '${BOT_CHANNEL_LOGS}'\n" >> bot.config
      - run: echo "DB_HOST = '${BOT_DB_HOST}'\n" >> bot.config
      - run: echo "DB_NAME = '${BOT_DB_NAME}'\n" >> bot.config
      - run: echo "DB_USER = '${BOT_DB_USER}'\n" >> bot.config
      - run: echo "DB_PASS = '${BOT_DB_PASS}'\n" >> bot.config

      - save_cache:
          paths:
            - ./vendor
          key: v1-dependencies-{{ checksum "composer.json" }}

      - deploy:
          name: Deploy to host if branch is master
          command: |
               if [ "${CIRCLE_BRANCH}" == "master" ]; then
                sudo apt-get update
                sudo apt-get -qq install git-ftp
                echo "'_$(git status -uno --porcelain | wc -l)_'"
                git status -uno --porcelain
                echo "Initiating Push"
                git ftp push --auto-init --user "${FTP_USER}" --passwd "${FTP_PASS}" "ftp://${FTP_HOST}:${FTP_PORT}/public_html"
               else
                echo "Not master branch so not deploying"
               fi

      # run tests!
      #- run: phpunit